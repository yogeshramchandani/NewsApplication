package com.example.realtimenewsapplication.repositoryimport android.util.Logimport androidx.paging.Pagerimport androidx.paging.PagingConfigimport androidx.paging.PagingDataimport com.example.realtimenewsapplication.api.NewsAPIimport com.example.realtimenewsapplication.models.Articleimport com.example.realtimenewsapplication.models.NewsResponseimport com.example.realtimenewsapplication.paging.NewsPagingSourceimport com.example.realtimenewsapplication.room.NewsDaoimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.firstimport javax.inject.Injectclass NewsRepository @Inject constructor(    private val newsAPI: NewsAPI, private val newsDao: NewsDao) {    private val _articles = MutableStateFlow<NewsResponse?>(null) // Use nullable type    val articles: StateFlow<NewsResponse?> = _articles    private val _favouritesArticle = MutableStateFlow<List<Article>>(emptyList())    val favourites: StateFlow<List<Article>> get() = _favouritesArticle    // Fetch breaking news    suspend fun getNews(pageNumber: Int): NewsResponse? {        return try {            val response = newsAPI.getBreakingNews(                pageNumber = pageNumber, countryCode = "us"            )            if (response.isSuccessful && response.body() != null) {                response.body() // Return the fetched NewsResponse            } else {                Log.e("NewsRepository", "Failed to fetch news: ${response.errorBody()?.string()}")                null            }        } catch (e: Exception) {            Log.e("NewsRepository", "Network error: ${e.message}")            null        }    }    // Fetch searched news    suspend fun getSearchedNews(query: String): NewsResponse? {        return try {            val response = newsAPI.getSearchNews(query = query)            if (response.isSuccessful && response.body() != null) {                response.body()            } else {                Log.e("NewsRepository", "Failed to fetch news: ${response.errorBody()?.string()}")                null            }        } catch (e: Exception) {            Log.e("NewsRepository", "Network error: ${e.message}")            null        }    }    fun getFavouriteArticles(): Flow<List<Article>> {        return newsDao.getAllFavouriteArticle()    }    suspend fun addToFavorites(article: Article) {        newsDao.insertArticle(article)    }    suspend fun removeFromFavorites(article: Article) {        newsDao.deleteArticle(article)    }    suspend fun toggleFavorite(article: Article) {        val currentFavorites = newsDao.getAllFavouriteArticle().first()// Get the list once        if (currentFavorites.any { it.url == article.url }) {            removeFromFavorites(article)        } else {            addToFavorites(article)        }    }    class NewsRepository @Inject constructor(        private val newsAPI: NewsAPI,        private val newsDao: NewsDao    ) {        fun getNews(): Flow<PagingData<Article>> {            return Pager(                config = PagingConfig(pageSize = 20, maxSize = 100),                pagingSourceFactory = { NewsPagingSource(newsAPI) }            ).flow        }    }}